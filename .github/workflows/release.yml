name: Release all CLIs & Deploy CF Workers

on:
  push:
    branches:
      - main

env:
  # each folder under the repo root that contains one of your CLIs
  WORKSPACES: create-db create-pg create-postgres

jobs:
  release:
    name: üöÄ Release all CLIs & workers
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout full & tags
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: ü§ê Disable Husky
        run: echo "HUSKY=0" >> $GITHUB_ENV

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: üîß Install dependencies
        run: pnpm install

      - name: ‚úîÔ∏è Check for pending changesets
        run: |
          pnpm changeset status --output status.json
          if [ "$(jq '.changesets | length' status.json)" -eq 0 ]; then
            echo "‚ùå No changesets found. Please run 'pnpm changeset' and add a summary." >&2
            exit 1
          fi
        # install jq if missing
      - name: üîß Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: üîÑ Bump versions & generate changelogs
        id: bump
        run: pnpm changeset version

      - name: üìÑ Copy README to child CLIs
        run: |
          for pkg in create-pg create-postgres; do
            cp create-db/README.md "$pkg/README.md"
          done

      - name: üíæ Commit & push version bump
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # collect all bumped package@version
          VERSIONS=$(jq -r '.packages | to_entries[]
            | select(.value.changes != null)
            | .value.name + "@" + .value.packageJSON.version'
            status.json | paste -sd ', ' -)
          git commit -am "chore(release): bump $VERSIONS [skip ci]" || echo "no version changes"
          git push origin main --follow-tags

      - name: üìë Aggregate changelogs
        run: |
          echo "# Release ${{ steps.bump.outputs.newVersion }}" > AGGREGATED_CHANGELOG.md
          for pkg in $WORKSPACES; do
            echo "## $pkg" >> AGGREGATED_CHANGELOG.md
            # pull just the section for the new version from each CHANGELOG
            sed -n "/^## ${{ steps.bump.outputs.newVersion }}/,/^## /p" $pkg/CHANGELOG.md \
              | sed '1d;$d' \
              >> AGGREGATED_CHANGELOG.md
            echo "" >> AGGREGATED_CHANGELOG.md
          done

      - name: üö© Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.newVersion }}
          release_name: Release ${{ steps.bump.outputs.newVersion }}
          body_path: AGGREGATED_CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîë Configure npm auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.CREATE_DB_TOKEN_NPM }}" > ~/.npmrc

      - name: üöÄ Publish all real releases
        run: |
          for pkg in $WORKSPACES; do
            cd "$pkg"
            pnpm publish --access public
            cd - >/dev/null
          done

      # ‚Äî CF production deploys commented out; we rely on existing worker URLs
      # - name: ‚òÅÔ∏è Deploy create-db-worker (production)
      #   uses: cloudflare/wrangler-action@v3
      #   with:
      #     apiToken: ${{ secrets.CF_API_TOKEN }}
      #     accountId: ${{ secrets.CF_ACCOUNT_ID }}
      #     workingDirectory: create-db-worker
      #
      # - name: ‚òÅÔ∏è Deploy claim-db-worker (production)
      #   uses: cloudflare/wrangler-action@v3
      #   with:
      #     apiToken: ${{ secrets.CF_API_TOKEN }}
      #     accountId: ${{ secrets.CF_ACCOUNT_ID }}
      #     workingDirectory: claim-db-worker

      - name: üßπ Cleanup npm auth
        run: rm -f ~/.npmrc
